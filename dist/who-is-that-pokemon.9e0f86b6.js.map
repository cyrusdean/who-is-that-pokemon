{"version":3,"sources":["index.js"],"names":["utils","initialState","pokemon","selectedPokemonIndex","guessedPokemonIndex","status","correctGuesses","incorrectGuesses","randomNumUpTo","max","Math","floor","random","pokemonApp","state","init","console","log","updateStatus","pokemonCount","pokemonAPIResponse","fetch","then","res","json","catch","error","results","map","name","i","charAt","toUpperCase","slice","avatarUrl","startGameButtonEl","document","getElementById","addEventListener","startGame","bind","clearHTML","innerHTML","innerText","whoIsThatPokemonBannerEl","querySelectorAll","length","removeChild","lastChild","selectedPokemon","pokemonImage","createElement","src","appendChild","beginGuessing","pokemonIndexMax","guessingOptionIndexes","Array","splice","timeoutToEndGame","setTimeout","finishGame","guessingOptionsEl","forEach","guessingOptionIndex","pokemonOption","pokemonOptionEl","event","clearTimeout","target","targetPokemon","didNotGuess","guessedCorrectly","textResult","correctGuessesEl","incorrectGuessesEl","initialPokemon","restInitialState","classList"],"mappings":"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","file":"who-is-that-pokemon.9e0f86b6.js","sourceRoot":"..","sourcesContent":["const utils = {\n    initialState: {\n        pokemon: [],\n        selectedPokemonIndex: null,\n        guessedPokemonIndex: null,\n        status: 'ready',\n        correctGuesses: 0,\n        incorrectGuesses: 0\n    },\n    randomNumUpTo: (max) => Math.floor(Math.random() * (max + 1))\n}\n\nconst pokemonApp = {\n    state: { ...utils.initialState },\n    /*\n          In the regular function, a function always defines its this value. \n          Arrow functions treat this keyword differently. They don’t define their \n          own context since it doesn’t have its own this context. They inherit \n          that from the parent scope whenever you call this.\n   \n          init: () => {\n              console.log(this) // -> {}\n          }\n      */\n    init: async function () {\n        console.log(this);\n        this.updateStatus('ready')\n\n        const pokemonCount = 368;\n        const pokemonAPIResponse = await fetch(\n            `https://pokeapi.co/api/v2/pokemon?limit=${pokemonCount}`\n        )\n            .then((res) => res.json())\n            .catch((error) => {\n                console.log(error);\n            });\n        console.log(pokemonAPIResponse);\n\n        let { results: pokemon } = pokemonAPIResponse;\n        pokemon = pokemon.map(({ name }, i) => {\n            const capitalizedPokemonName =\n                name.charAt(0).toUpperCase() + name.slice(1);\n            const avatarUrl = `https://raw.githubusercontent.com/PokeAPI/sprites/master/sprites/pokemon/other/dream-world/${i + 1\n                }.svg`\n            return {\n                name: capitalizedPokemonName,\n                avatarUrl,\n            };\n        });\n        console.log(pokemon);\n\n        this.state.pokemon = pokemon;\n\n        console.log(this);\n\n        const startGameButtonEl = document.getElementById(\"startGameButton\");\n        startGameButtonEl.addEventListener('click', this.startGame.bind(this))\n\n        console.log(startGameButtonEl);\n    },\n    clearHTML: function () {\n        const guessingOptionsEl = document.getElementById('guessingOptions')\n        guessingOptionsEl.innerHTML = ''\n\n        const answerEl = document.getElementById('answer')\n        answerEl.innerText = ''\n\n        const whoIsThatPokemonBannerEl = document.getElementById('whoIsThatPokemonBanner')\n        if (whoIsThatPokemonBannerEl.querySelectorAll('img').length > 1)\n            whoIsThatPokemonBannerEl.removeChild(whoIsThatPokemonBannerEl.lastChild)\n    },\n    startGame: function () {\n        console.log(this)\n        this.clearHTML()\n        this.updateStatus('viewing')\n\n        const selectedPokemonIndex = utils.randomNumUpTo(this.state.pokemon.length - 1)\n        this.state.selectedPokemonIndex = selectedPokemonIndex\n        const selectedPokemon = this.state.pokemon[selectedPokemonIndex]\n        console.log(selectedPokemon)\n        const { avatarUrl } = selectedPokemon\n\n        const whoIsThatPokemonBannerEl = document.getElementById('whoIsThatPokemonBanner')\n        const pokemonImage = document.createElement('img');\n        pokemonImage.src = avatarUrl\n        whoIsThatPokemonBannerEl.appendChild(pokemonImage)\n\n        this.beginGuessing()\n    },\n    beginGuessing: function () {\n        console.log(this)\n        this.updateStatus('guessing')\n        const { pokemon, selectedPokemonIndex } = this.state\n        const { randomNumUpTo } = utils\n        const pokemonIndexMax = pokemon.length - 1\n        const numOfOtherOptions = 3\n        let guessingOptionIndexes = [...Array(numOfOtherOptions)].map(() => randomNumUpTo(pokemonIndexMax))\n        console.log(guessingOptionIndexes)\n        guessingOptionIndexes.splice(randomNumUpTo(numOfOtherOptions), 0, selectedPokemonIndex)\n\n        const timeoutToEndGame = setTimeout(this.finishGame.bind(this), 3000)\n\n        const guessingOptionsEl = document.getElementById('guessingOptions')\n        guessingOptionIndexes.forEach(guessingOptionIndex => {\n            const pokemonOption = pokemon[guessingOptionIndex]\n            const { name } = pokemonOption\n\n            const pokemonOptionEl = document.createElement('li');\n            pokemonOptionEl.innerText = name\n            pokemonOptionEl.addEventListener('click', (event) => {\n                clearTimeout(timeoutToEndGame)\n                const { target } = event;\n                const targetPokemon = target.innerText\n                console.log(targetPokemon)\n                this.state.guessedPokemonIndex = guessingOptionIndex\n                this.finishGame()\n            })\n\n            guessingOptionsEl.appendChild(pokemonOptionEl)\n        })\n\n\n    },\n    finishGame: function () {\n        console.log(this)\n        const { selectedPokemonIndex, guessedPokemonIndex, pokemon } = this.state\n        const didNotGuess = guessedPokemonIndex === null\n        const guessedCorrectly = selectedPokemonIndex === guessedPokemonIndex && !didNotGuess\n        let textResult = guessedCorrectly ? 'Yep' : 'Nope'\n        textResult = didNotGuess ? 'Oops' : textResult\n        const selectedPokemon = pokemon[selectedPokemonIndex]\n        console.log(selectedPokemon)\n        const { name } = selectedPokemon\n\n        const answerEl = document.getElementById('answer')\n        answerEl.innerText = `${textResult}! It's ${name}!`\n\n        const [correctGuessesEl, incorrectGuessesEl] = document.querySelectorAll('.count')\n        if (guessedCorrectly) {\n            this.state.correctGuesses++\n            correctGuessesEl.innerText = this.state.correctGuesses\n        } else {\n            this.state.incorrectGuesses++\n            incorrectGuessesEl.innerText = this.state.incorrectGuesses\n        }\n\n        const { pokemon: initialPokemon, correctGuesses, incorrectGuesses, ...restInitialState } = utils.initialState\n        this.state = { ...this.state, ...restInitialState }\n        console.log(utils.initialState)\n        console.log('this', this)\n        this.updateStatus('ready')\n    },\n    updateStatus: function (status) {\n        this.state.status = status\n        const gameContainer = document.getElementById('gameContainer')\n        gameContainer.classList = [status]\n    }\n};\n\n// Call our initialization of the application\npokemonApp.init();\n"]}